<!-- @ts-nocheck -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Mattermost DevSecOps</title>
  <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0">
  <script
    src="https://res.cdn.office.net/teams-js/2.34.0/js/MicrosoftTeams.min.js"
    integrity="sha384-brW9AazbKR2dYw2DucGgWCCcmrm2oBFV4HQidyuyZRI/TnAkmOOnTARSTdps3Hwt"
    crossorigin="anonymous"
  ></script>
</head>
<body>
    <style nonce="{{.Nonce}}">
        iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
        }
    </style>
    <iframe
        title="Mattermost DevSecOps"
        src="about:blank">
    </iframe>
  <script nonce="{{.Nonce}}">
    (function (microsoftTeams) {
      const expectedTenantId = '{{.TenantID}}';
      const domainRoot = '{{.SiteURL}}';
      const iframe = document.querySelector('iframe');

      function isValidOrigin(eventOrigin, expectedOrigin) {
        try {
          const eventUrl = new URL(eventOrigin);
          const expectedUrl = new URL(expectedOrigin);

          return eventUrl.protocol === expectedUrl.protocol &&
          eventUrl.hostname === expectedUrl.hostname &&
          eventUrl.port === expectedUrl.port;
        } catch (e) {
          console.error('Invalid origin URL:', e);
          return false;
        }
      }

      // Listen for a message from the iframe "mattermost_external_auth_login" sent by using `window.parent.postMessage`
      window.addEventListener('message', async function (event) {
        if (event.data.type === 'mattermost_external_auth_login') {
          console.log('Received message from Mattermost:', event.data);
          // Reply the message to let Mattermost know we are going to handle the authentication flow.
          event.source.postMessage({type: 'mattermost_external_auth_login', ack: true}, domainRoot);

          iframe.src = domainRoot + '/plugins/com.mattermost.plugin-msteams-devsecops/sso/wait';

          // Parse the URL and add redirect_to parameter
          const url = new URL(event.data.href);

          // Ensure that the URL hostname is the same as domainRoot
          if (!isValidOrigin(url, domainRoot)) {
            console.error('Rejecting an invalid origin');
            return
          }

          url.searchParams.set('redirect_to', '/plugins/com.mattermost.plugin-msteams-devsecops/sso/complete');

          // Store reference to wait iframe window to send messages
          const waitIframeWindow = iframe.contentWindow;

          // Launch auth popup using native JavaScript
          const popup = window.open(url.toString(), 'MattermostAuth', 'width=600,height=535,resizable=yes');

          // Check if popup was blocked
          if (!popup || popup.closed || typeof popup.closed === 'undefined') {
            waitIframeWindow.postMessage({
              type: 'auth_error',
              error: 'Popup was blocked. Please enable popups for this site.'
            }, domainRoot);
            return;
          }

          // Setup message listener for auth_success and auth_error messages from the popup
          const authMessageHandler = function(messageEvent) {
            if (messageEvent.data && (messageEvent.data.type === 'auth_success' || messageEvent.data.type === 'auth_error')) {
              // Forward the message to the wait iframe
              waitIframeWindow.postMessage(messageEvent.data, domainRoot);

              // Remove the event listener once we've received a response
              window.removeEventListener('message', authMessageHandler);

              // Clear the interval since we don't need to poll anymore
              clearInterval(popupCheckInterval);
            }
          };

          // Add event listener for messages from the popup
          window.addEventListener('message', authMessageHandler);

          // Still keep polling to detect when the popup is closed
          const popupCheckInterval = setInterval(() => {
            if (popup.closed) {
              clearInterval(popupCheckInterval);
              // Remove the event listener when popup is closed
              window.removeEventListener('message', authMessageHandler);

              // Don't assume success or failure if the popup was closed without sending a message
              // Just inform the user that authentication was cancelled
              waitIframeWindow.postMessage({
                type: 'auth_error',
                error: 'Authentication was cancelled or interrupted. Please try again.'
              }, domainRoot);
            }
          }, 500);
        }

        // External auth is completed, move the iframe to Mattermost again.
        if (event.data.type === 'mattermost_external_auth_complete') {
          console.log('Received message from Mattermost:', event.data);
          iframe.src = domainRoot;
        }
      });

      function getAuthTokenWithRetries(maxRetries = 3) {
        return new Promise((resolve, reject) => {
          let retries = 0;

          const getToken = () => {
            console.log("Trying to get token, attempt ", retries + 1);
            microsoftTeams.authentication.getAuthToken().then((token) => {
              resolve(token);
            }).catch((error) => {
              console.error("Failed to get token:", error);
              if (retries < maxRetries) {
                console.log("Retrying...");
                retries++;
                setTimeout(getToken, 250 + (250 * retries^2)); // Exponential backoff
              } else {
                reject(error);
              }
            });
          };
          getToken();
        });
      }

      // Initialize the Microsoft Teams SDK
      microsoftTeams.app.initialize(['{{.SiteURL}}']).then(() => {
        microsoftTeams.app.notifySuccess();
      }).catch((error) => {
        console.error('Failed to initialize Microsoft Teams SDK:', error);
        iframe.src = '{{.SiteURL}}';
      });

      // Choose the iFrame content based on the tenant.
      microsoftTeams.app.getContext().then((context) => {
        let tenantId;
        if (context && context.user && context.user.tenant && context.user.tenant.id) {
          tenantId = context.user.tenant.id;
        }

        // If the expected tenant matches the actual tenant then try to get auth token
        if (tenantId === expectedTenantId) {
          var params = new URLSearchParams();
          // Build query params to be sent to the iframe.
          // Extract the subPageId (subEntityId coming from the Microsoft Teams SDK User Activity notification)
          // and send it to the iframe to redirect the user to what triggered the notification.
          if (context && context.page && context.page.subPageId) {
            params.set('sub_entity_id', context.page.subPageId);
          }

          getAuthTokenWithRetries(3)
            .then((token) => {
              params.set('token', token);
              iframe.src = `${domainRoot}/plugins/{{.PluginID}}/iframe/authenticate?${params.toString()}`;
            })
            .catch((error) => {
              console.error('Failed to get auth token:', error);
              iframe.src = domainRoot;
            });
        } else {
          // Expected tenant does not match actual tenant the user is logged into; just redirect to SITE_URL and the user
          // will have to log in without SSO
          console.log('No tenant match found, redirecting to default site');
          iframe.src = '{{.SiteURL}}';
        }
      }).catch((error) => {
        // User appears to not be logged into Microsoft Teams, or the context is not available.
        // Just redirect to the SITE_URL and the user will have to log in without SSO.
        console.error('Failed to get context:', error);
        iframe.src = '{{.SiteURL}}';
      });
    })(microsoftTeams);
  </script>
</body>
</html>
