// Copyright (c) 2023-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pluginstore

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// GetAppID provides a mock function for the type MockStore
func (_mock *MockStore) GetAppID(tenantID string) (string, error) {
	ret := _mock.Called(tenantID)

	if len(ret) == 0 {
		panic("no return value specified for GetAppID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(tenantID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(tenantID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(tenantID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetAppID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppID'
type MockStore_GetAppID_Call struct {
	*mock.Call
}

// GetAppID is a helper method to define mock.On call
//   - tenantID
func (_e *MockStore_Expecter) GetAppID(tenantID interface{}) *MockStore_GetAppID_Call {
	return &MockStore_GetAppID_Call{Call: _e.mock.On("GetAppID", tenantID)}
}

func (_c *MockStore_GetAppID_Call) Run(run func(tenantID string)) *MockStore_GetAppID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStore_GetAppID_Call) Return(s string, err error) *MockStore_GetAppID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStore_GetAppID_Call) RunAndReturn(run func(tenantID string) (string, error)) *MockStore_GetAppID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockStore
func (_mock *MockStore) GetUser(mattermostUserID string) (*User, error) {
	ret := _mock.Called(mattermostUserID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*User, error)); ok {
		return returnFunc(mattermostUserID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *User); ok {
		r0 = returnFunc(mattermostUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(mattermostUserID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockStore_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - mattermostUserID
func (_e *MockStore_Expecter) GetUser(mattermostUserID interface{}) *MockStore_GetUser_Call {
	return &MockStore_GetUser_Call{Call: _e.mock.On("GetUser", mattermostUserID)}
}

func (_c *MockStore_GetUser_Call) Run(run func(mattermostUserID string)) *MockStore_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStore_GetUser_Call) Return(user *User, err error) *MockStore_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockStore_GetUser_Call) RunAndReturn(run func(mattermostUserID string) (*User, error)) *MockStore_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// StoreAppID provides a mock function for the type MockStore
func (_mock *MockStore) StoreAppID(tenantID string, appID string) error {
	ret := _mock.Called(tenantID, appID)

	if len(ret) == 0 {
		panic("no return value specified for StoreAppID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(tenantID, appID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_StoreAppID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreAppID'
type MockStore_StoreAppID_Call struct {
	*mock.Call
}

// StoreAppID is a helper method to define mock.On call
//   - tenantID
//   - appID
func (_e *MockStore_Expecter) StoreAppID(tenantID interface{}, appID interface{}) *MockStore_StoreAppID_Call {
	return &MockStore_StoreAppID_Call{Call: _e.mock.On("StoreAppID", tenantID, appID)}
}

func (_c *MockStore_StoreAppID_Call) Run(run func(tenantID string, appID string)) *MockStore_StoreAppID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockStore_StoreAppID_Call) Return(err error) *MockStore_StoreAppID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_StoreAppID_Call) RunAndReturn(run func(tenantID string, appID string) error) *MockStore_StoreAppID_Call {
	_c.Call.Return(run)
	return _c
}

// StoreUser provides a mock function for the type MockStore
func (_mock *MockStore) StoreUser(user *User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for StoreUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_StoreUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreUser'
type MockStore_StoreUser_Call struct {
	*mock.Call
}

// StoreUser is a helper method to define mock.On call
//   - user
func (_e *MockStore_Expecter) StoreUser(user interface{}) *MockStore_StoreUser_Call {
	return &MockStore_StoreUser_Call{Call: _e.mock.On("StoreUser", user)}
}

func (_c *MockStore_StoreUser_Call) Run(run func(user *User)) *MockStore_StoreUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*User))
	})
	return _c
}

func (_c *MockStore_StoreUser_Call) Return(err error) *MockStore_StoreUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_StoreUser_Call) RunAndReturn(run func(user *User) error) *MockStore_StoreUser_Call {
	_c.Call.Return(run)
	return _c
}

// UserExists provides a mock function for the type MockStore
func (_mock *MockStore) UserExists(mattermostUserID string) (bool, error) {
	ret := _mock.Called(mattermostUserID)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(mattermostUserID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(mattermostUserID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(mattermostUserID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_UserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExists'
type MockStore_UserExists_Call struct {
	*mock.Call
}

// UserExists is a helper method to define mock.On call
//   - mattermostUserID
func (_e *MockStore_Expecter) UserExists(mattermostUserID interface{}) *MockStore_UserExists_Call {
	return &MockStore_UserExists_Call{Call: _e.mock.On("UserExists", mattermostUserID)}
}

func (_c *MockStore_UserExists_Call) Run(run func(mattermostUserID string)) *MockStore_UserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStore_UserExists_Call) Return(b bool, err error) *MockStore_UserExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockStore_UserExists_Call) RunAndReturn(run func(mattermostUserID string) (bool, error)) *MockStore_UserExists_Call {
	_c.Call.Return(run)
	return _c
}
