// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	clientmodels "github.com/mattermost/mattermost-plugin-msteams-devsecops/server/msteams/clientmodels"

	mock "github.com/stretchr/testify/mock"

	models "github.com/microsoftgraph/msgraph-sdk-go/models"

	oauth2 "golang.org/x/oauth2"

	time "time"

	url "net/url"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Connect provides a mock function with no fields
func (_m *Client) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrGetChatForUsers provides a mock function with given fields: usersIDs
func (_m *Client) CreateOrGetChatForUsers(usersIDs []string) (*clientmodels.Chat, error) {
	ret := _m.Called(usersIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrGetChatForUsers")
	}

	var r0 *clientmodels.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (*clientmodels.Chat, error)); ok {
		return rf(usersIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) *clientmodels.Chat); ok {
		r0 = rf(usersIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(usersIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChatMessage provides a mock function with given fields: userID, chatID, msgID
func (_m *Client) DeleteChatMessage(userID string, chatID string, msgID string) error {
	ret := _m.Called(userID, chatID, msgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChatMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, chatID, msgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessage provides a mock function with given fields: teamID, channelID, parentID, msgID
func (_m *Client) DeleteMessage(teamID string, channelID string, parentID string, msgID string) error {
	ret := _m.Called(teamID, channelID, parentID, msgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(teamID, channelID, parentID, msgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: subscriptionID
func (_m *Client) DeleteSubscription(subscriptionID string) error {
	ret := _m.Called(subscriptionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(subscriptionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApp provides a mock function with given fields: applicationID
func (_m *Client) GetApp(applicationID string) (*clientmodels.App, error) {
	ret := _m.Called(applicationID)

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *clientmodels.App
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*clientmodels.App, error)); ok {
		return rf(applicationID)
	}
	if rf, ok := ret.Get(0).(func(string) *clientmodels.App); ok {
		r0 = rf(applicationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.App)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelInTeam provides a mock function with given fields: teamID, channelID
func (_m *Client) GetChannelInTeam(teamID string, channelID string) (*clientmodels.Channel, error) {
	ret := _m.Called(teamID, channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelInTeam")
	}

	var r0 *clientmodels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*clientmodels.Channel, error)); ok {
		return rf(teamID, channelID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *clientmodels.Channel); ok {
		r0 = rf(teamID, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(teamID, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelsInTeam provides a mock function with given fields: teamID, filterQuery
func (_m *Client) GetChannelsInTeam(teamID string, filterQuery string) ([]*clientmodels.Channel, error) {
	ret := _m.Called(teamID, filterQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelsInTeam")
	}

	var r0 []*clientmodels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*clientmodels.Channel, error)); ok {
		return rf(teamID, filterQuery)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*clientmodels.Channel); ok {
		r0 = rf(teamID, filterQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(teamID, filterQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChat provides a mock function with given fields: chatID
func (_m *Client) GetChat(chatID string) (*clientmodels.Chat, error) {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetChat")
	}

	var r0 *clientmodels.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*clientmodels.Chat, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(string) *clientmodels.Chat); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatMessage provides a mock function with given fields: chatID, messageID
func (_m *Client) GetChatMessage(chatID string, messageID string) (*clientmodels.Message, error) {
	ret := _m.Called(chatID, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*clientmodels.Message, error)); ok {
		return rf(chatID, messageID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *clientmodels.Message); ok {
		r0 = rf(chatID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(chatID, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCodeSnippet provides a mock function with given fields: _a0
func (_m *Client) GetCodeSnippet(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeSnippet")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileContent provides a mock function with given fields: downloadURL
func (_m *Client) GetFileContent(downloadURL string) ([]byte, error) {
	ret := _m.Called(downloadURL)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContent")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(downloadURL)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(downloadURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(downloadURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileContentStream provides a mock function with given fields: downloadURL, writer, bufferSize
func (_m *Client) GetFileContentStream(downloadURL string, writer *io.PipeWriter, bufferSize int64) {
	_m.Called(downloadURL, writer, bufferSize)
}

// GetFileSizeAndDownloadURL provides a mock function with given fields: weburl
func (_m *Client) GetFileSizeAndDownloadURL(weburl string) (int64, string, error) {
	ret := _m.Called(weburl)

	if len(ret) == 0 {
		panic("no return value specified for GetFileSizeAndDownloadURL")
	}

	var r0 int64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (int64, string, error)); ok {
		return rf(weburl)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(weburl)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(weburl)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(weburl)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetHostedFileContent provides a mock function with given fields: activityIDs
func (_m *Client) GetHostedFileContent(activityIDs *clientmodels.ActivityIDs) ([]byte, error) {
	ret := _m.Called(activityIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetHostedFileContent")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*clientmodels.ActivityIDs) ([]byte, error)); ok {
		return rf(activityIDs)
	}
	if rf, ok := ret.Get(0).(func(*clientmodels.ActivityIDs) []byte); ok {
		r0 = rf(activityIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*clientmodels.ActivityIDs) error); ok {
		r1 = rf(activityIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMe provides a mock function with no fields
func (_m *Client) GetMe() (*clientmodels.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMe")
	}

	var r0 *clientmodels.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (*clientmodels.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *clientmodels.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessage provides a mock function with given fields: teamID, channelID, messageID
func (_m *Client) GetMessage(teamID string, channelID string, messageID string) (*clientmodels.Message, error) {
	ret := _m.Called(teamID, channelID, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*clientmodels.Message, error)); ok {
		return rf(teamID, channelID, messageID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *clientmodels.Message); ok {
		r0 = rf(teamID, channelID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(teamID, channelID, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyID provides a mock function with no fields
func (_m *Client) GetMyID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMyID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPresencesForUsers provides a mock function with given fields: userIDs
func (_m *Client) GetPresencesForUsers(userIDs []string) (map[string]clientmodels.Presence, error) {
	ret := _m.Called(userIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetPresencesForUsers")
	}

	var r0 map[string]clientmodels.Presence
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (map[string]clientmodels.Presence, error)); ok {
		return rf(userIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) map[string]clientmodels.Presence); ok {
		r0 = rf(userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]clientmodels.Presence)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReply provides a mock function with given fields: teamID, channelID, messageID, replyID
func (_m *Client) GetReply(teamID string, channelID string, messageID string, replyID string) (*clientmodels.Message, error) {
	ret := _m.Called(teamID, channelID, messageID, replyID)

	if len(ret) == 0 {
		panic("no return value specified for GetReply")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*clientmodels.Message, error)); ok {
		return rf(teamID, channelID, messageID, replyID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *clientmodels.Message); ok {
		r0 = rf(teamID, channelID, messageID, replyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(teamID, channelID, messageID, replyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeam provides a mock function with given fields: teamID
func (_m *Client) GetTeam(teamID string) (*clientmodels.Team, error) {
	ret := _m.Called(teamID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *clientmodels.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*clientmodels.Team, error)); ok {
		return rf(teamID)
	}
	if rf, ok := ret.Get(0).(func(string) *clientmodels.Team); ok {
		r0 = rf(teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeams provides a mock function with given fields: filterQuery
func (_m *Client) GetTeams(filterQuery string) ([]*clientmodels.Team, error) {
	ret := _m.Called(filterQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []*clientmodels.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*clientmodels.Team, error)); ok {
		return rf(filterQuery)
	}
	if rf, ok := ret.Get(0).(func(string) []*clientmodels.Team); ok {
		r0 = rf(filterQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filterQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userID
func (_m *Client) GetUser(userID string) (*clientmodels.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *clientmodels.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*clientmodels.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *clientmodels.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAvatar provides a mock function with given fields: userID
func (_m *Client) GetUserAvatar(userID string) ([]byte, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAvatar")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelMessages provides a mock function with given fields: teamID, channelID, since
func (_m *Client) ListChannelMessages(teamID string, channelID string, since time.Time) ([]*clientmodels.Message, error) {
	ret := _m.Called(teamID, channelID, since)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMessages")
	}

	var r0 []*clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Time) ([]*clientmodels.Message, error)); ok {
		return rf(teamID, channelID, since)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Time) []*clientmodels.Message); ok {
		r0 = rf(teamID, channelID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Time) error); ok {
		r1 = rf(teamID, channelID, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannels provides a mock function with given fields: teamID
func (_m *Client) ListChannels(teamID string) ([]clientmodels.Channel, error) {
	ret := _m.Called(teamID)

	if len(ret) == 0 {
		panic("no return value specified for ListChannels")
	}

	var r0 []clientmodels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]clientmodels.Channel, error)); ok {
		return rf(teamID)
	}
	if rf, ok := ret.Get(0).(func(string) []clientmodels.Channel); ok {
		r0 = rf(teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientmodels.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChatMessages provides a mock function with given fields: chatID, since
func (_m *Client) ListChatMessages(chatID string, since time.Time) ([]*clientmodels.Message, error) {
	ret := _m.Called(chatID, since)

	if len(ret) == 0 {
		panic("no return value specified for ListChatMessages")
	}

	var r0 []*clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time) ([]*clientmodels.Message, error)); ok {
		return rf(chatID, since)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time) []*clientmodels.Message); ok {
		r0 = rf(chatID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(chatID, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with no fields
func (_m *Client) ListSubscriptions() ([]*clientmodels.Subscription, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 []*clientmodels.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*clientmodels.Subscription, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*clientmodels.Subscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTeams provides a mock function with no fields
func (_m *Client) ListTeams() ([]clientmodels.Team, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListTeams")
	}

	var r0 []clientmodels.Team
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]clientmodels.Team, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []clientmodels.Team); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientmodels.Team)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with no fields
func (_m *Client) ListUsers() ([]clientmodels.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []clientmodels.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]clientmodels.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []clientmodels.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientmodels.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshSubscription provides a mock function with given fields: subscriptionID
func (_m *Client) RefreshSubscription(subscriptionID string) (*time.Time, error) {
	ret := _m.Called(subscriptionID)

	if len(ret) == 0 {
		panic("no return value specified for RefreshSubscription")
	}

	var r0 *time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*time.Time, error)); ok {
		return rf(subscriptionID)
	}
	if rf, ok := ret.Get(0).(func(string) *time.Time); ok {
		r0 = rf(subscriptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriptionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: token
func (_m *Client) RefreshToken(token *oauth2.Token) (*oauth2.Token, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(*oauth2.Token) (*oauth2.Token, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*oauth2.Token) *oauth2.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(*oauth2.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChat provides a mock function with given fields: chatID, message, parentMessage, attachments, mentions
func (_m *Client) SendChat(chatID string, message string, parentMessage *clientmodels.Message, attachments []*clientmodels.Attachment, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error) {
	ret := _m.Called(chatID, message, parentMessage, attachments, mentions)

	if len(ret) == 0 {
		panic("no return value specified for SendChat")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *clientmodels.Message, []*clientmodels.Attachment, []models.ChatMessageMentionable) (*clientmodels.Message, error)); ok {
		return rf(chatID, message, parentMessage, attachments, mentions)
	}
	if rf, ok := ret.Get(0).(func(string, string, *clientmodels.Message, []*clientmodels.Attachment, []models.ChatMessageMentionable) *clientmodels.Message); ok {
		r0 = rf(chatID, message, parentMessage, attachments, mentions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *clientmodels.Message, []*clientmodels.Attachment, []models.ChatMessageMentionable) error); ok {
		r1 = rf(chatID, message, parentMessage, attachments, mentions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: teamID, channelID, parentID, message
func (_m *Client) SendMessage(teamID string, channelID string, parentID string, message string) (*clientmodels.Message, error) {
	ret := _m.Called(teamID, channelID, parentID, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*clientmodels.Message, error)); ok {
		return rf(teamID, channelID, parentID, message)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *clientmodels.Message); ok {
		r0 = rf(teamID, channelID, parentID, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(teamID, channelID, parentID, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessageWithAttachments provides a mock function with given fields: teamID, channelID, parentID, message, attachments, mentions
func (_m *Client) SendMessageWithAttachments(teamID string, channelID string, parentID string, message string, attachments []*clientmodels.Attachment, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error) {
	ret := _m.Called(teamID, channelID, parentID, message, attachments, mentions)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageWithAttachments")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, []*clientmodels.Attachment, []models.ChatMessageMentionable) (*clientmodels.Message, error)); ok {
		return rf(teamID, channelID, parentID, message, attachments, mentions)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, []*clientmodels.Attachment, []models.ChatMessageMentionable) *clientmodels.Message); ok {
		r0 = rf(teamID, channelID, parentID, message, attachments, mentions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, []*clientmodels.Attachment, []models.ChatMessageMentionable) error); ok {
		r1 = rf(teamID, channelID, parentID, message, attachments, mentions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendUserActivity provides a mock function with given fields: userIDs, activityType, message, webURL, params
func (_m *Client) SendUserActivity(userIDs []string, activityType string, message string, webURL url.URL, params map[string]string) error {
	ret := _m.Called(userIDs, activityType, message, webURL, params)

	if len(ret) == 0 {
		panic("no return value specified for SendUserActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string, string, url.URL, map[string]string) error); ok {
		r0 = rf(userIDs, activityType, message, webURL, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetChatReaction provides a mock function with given fields: chatID, messageID, userID, emoji
func (_m *Client) SetChatReaction(chatID string, messageID string, userID string, emoji string) (*clientmodels.Message, error) {
	ret := _m.Called(chatID, messageID, userID, emoji)

	if len(ret) == 0 {
		panic("no return value specified for SetChatReaction")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*clientmodels.Message, error)); ok {
		return rf(chatID, messageID, userID, emoji)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *clientmodels.Message); ok {
		r0 = rf(chatID, messageID, userID, emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(chatID, messageID, userID, emoji)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetReaction provides a mock function with given fields: teamID, channelID, parentID, messageID, userID, emoji
func (_m *Client) SetReaction(teamID string, channelID string, parentID string, messageID string, userID string, emoji string) (*clientmodels.Message, error) {
	ret := _m.Called(teamID, channelID, parentID, messageID, userID, emoji)

	if len(ret) == 0 {
		panic("no return value specified for SetReaction")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) (*clientmodels.Message, error)); ok {
		return rf(teamID, channelID, parentID, messageID, userID, emoji)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) *clientmodels.Message); ok {
		r0 = rf(teamID, channelID, parentID, messageID, userID, emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(teamID, channelID, parentID, messageID, userID, emoji)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToChannel provides a mock function with given fields: teamID, channelID, baseURL, webhookSecret, certificate
func (_m *Client) SubscribeToChannel(teamID string, channelID string, baseURL string, webhookSecret string, certificate string) (*clientmodels.Subscription, error) {
	ret := _m.Called(teamID, channelID, baseURL, webhookSecret, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToChannel")
	}

	var r0 *clientmodels.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) (*clientmodels.Subscription, error)); ok {
		return rf(teamID, channelID, baseURL, webhookSecret, certificate)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) *clientmodels.Subscription); ok {
		r0 = rf(teamID, channelID, baseURL, webhookSecret, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(teamID, channelID, baseURL, webhookSecret, certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToChannels provides a mock function with given fields: baseURL, webhookSecret, pay, certificate
func (_m *Client) SubscribeToChannels(baseURL string, webhookSecret string, pay bool, certificate string) (*clientmodels.Subscription, error) {
	ret := _m.Called(baseURL, webhookSecret, pay, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToChannels")
	}

	var r0 *clientmodels.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, bool, string) (*clientmodels.Subscription, error)); ok {
		return rf(baseURL, webhookSecret, pay, certificate)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool, string) *clientmodels.Subscription); ok {
		r0 = rf(baseURL, webhookSecret, pay, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool, string) error); ok {
		r1 = rf(baseURL, webhookSecret, pay, certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToChats provides a mock function with given fields: baseURL, webhookSecret, pay, certificate
func (_m *Client) SubscribeToChats(baseURL string, webhookSecret string, pay bool, certificate string) (*clientmodels.Subscription, error) {
	ret := _m.Called(baseURL, webhookSecret, pay, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToChats")
	}

	var r0 *clientmodels.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, bool, string) (*clientmodels.Subscription, error)); ok {
		return rf(baseURL, webhookSecret, pay, certificate)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool, string) *clientmodels.Subscription); ok {
		r0 = rf(baseURL, webhookSecret, pay, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool, string) error); ok {
		r1 = rf(baseURL, webhookSecret, pay, certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToUserChats provides a mock function with given fields: user, baseURL, webhookSecret, pay, certificate
func (_m *Client) SubscribeToUserChats(user string, baseURL string, webhookSecret string, pay bool, certificate string) (*clientmodels.Subscription, error) {
	ret := _m.Called(user, baseURL, webhookSecret, pay, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToUserChats")
	}

	var r0 *clientmodels.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, string) (*clientmodels.Subscription, error)); ok {
		return rf(user, baseURL, webhookSecret, pay, certificate)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, bool, string) *clientmodels.Subscription); ok {
		r0 = rf(user, baseURL, webhookSecret, pay, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, bool, string) error); ok {
		r1 = rf(user, baseURL, webhookSecret, pay, certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsetChatReaction provides a mock function with given fields: chatID, messageID, userID, emoji
func (_m *Client) UnsetChatReaction(chatID string, messageID string, userID string, emoji string) (*clientmodels.Message, error) {
	ret := _m.Called(chatID, messageID, userID, emoji)

	if len(ret) == 0 {
		panic("no return value specified for UnsetChatReaction")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*clientmodels.Message, error)); ok {
		return rf(chatID, messageID, userID, emoji)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *clientmodels.Message); ok {
		r0 = rf(chatID, messageID, userID, emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(chatID, messageID, userID, emoji)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsetReaction provides a mock function with given fields: teamID, channelID, parentID, messageID, userID, emoji
func (_m *Client) UnsetReaction(teamID string, channelID string, parentID string, messageID string, userID string, emoji string) (*clientmodels.Message, error) {
	ret := _m.Called(teamID, channelID, parentID, messageID, userID, emoji)

	if len(ret) == 0 {
		panic("no return value specified for UnsetReaction")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) (*clientmodels.Message, error)); ok {
		return rf(teamID, channelID, parentID, messageID, userID, emoji)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) *clientmodels.Message); ok {
		r0 = rf(teamID, channelID, parentID, messageID, userID, emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(teamID, channelID, parentID, messageID, userID, emoji)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChatMessage provides a mock function with given fields: chatID, msgID, message, mentions
func (_m *Client) UpdateChatMessage(chatID string, msgID string, message string, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error) {
	ret := _m.Called(chatID, msgID, message, mentions)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChatMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, []models.ChatMessageMentionable) (*clientmodels.Message, error)); ok {
		return rf(chatID, msgID, message, mentions)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, []models.ChatMessageMentionable) *clientmodels.Message); ok {
		r0 = rf(chatID, msgID, message, mentions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, []models.ChatMessageMentionable) error); ok {
		r1 = rf(chatID, msgID, message, mentions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMessage provides a mock function with given fields: teamID, channelID, parentID, msgID, message, mentions
func (_m *Client) UpdateMessage(teamID string, channelID string, parentID string, msgID string, message string, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error) {
	ret := _m.Called(teamID, channelID, parentID, msgID, message, mentions)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, []models.ChatMessageMentionable) (*clientmodels.Message, error)); ok {
		return rf(teamID, channelID, parentID, msgID, message, mentions)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, []models.ChatMessageMentionable) *clientmodels.Message); ok {
		r0 = rf(teamID, channelID, parentID, msgID, message, mentions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, []models.ChatMessageMentionable) error); ok {
		r1 = rf(teamID, channelID, parentID, msgID, message, mentions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: teamID, channelID, filename, filesize, mimeType, data, chat
func (_m *Client) UploadFile(teamID string, channelID string, filename string, filesize int, mimeType string, data io.Reader, chat *clientmodels.Chat) (*clientmodels.Attachment, error) {
	ret := _m.Called(teamID, channelID, filename, filesize, mimeType, data, chat)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 *clientmodels.Attachment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, string, io.Reader, *clientmodels.Chat) (*clientmodels.Attachment, error)); ok {
		return rf(teamID, channelID, filename, filesize, mimeType, data, chat)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, string, io.Reader, *clientmodels.Chat) *clientmodels.Attachment); ok {
		r0 = rf(teamID, channelID, filename, filesize, mimeType, data, chat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Attachment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, string, io.Reader, *clientmodels.Chat) error); ok {
		r1 = rf(teamID, channelID, filename, filesize, mimeType, data, chat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
