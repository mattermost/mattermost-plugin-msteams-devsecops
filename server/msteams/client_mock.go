// Copyright (c) 2023-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package msteams

import (
	"io"
	"net/url"
	"time"

	"github.com/mattermost/mattermost-plugin-msteams-devsecops/server/msteams/clientmodels"
	"github.com/microsoftgraph/msgraph-sdk-go/models"
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/oauth2"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function for the type MockClient
func (_mock *MockClient) Connect() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockClient_Expecter) Connect() *MockClient_Connect_Call {
	return &MockClient_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockClient_Connect_Call) Run(run func()) *MockClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Connect_Call) Return(err error) *MockClient_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Connect_Call) RunAndReturn(run func() error) *MockClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrGetChatForUsers provides a mock function for the type MockClient
func (_mock *MockClient) CreateOrGetChatForUsers(usersIDs []string) (*clientmodels.Chat, error) {
	ret := _mock.Called(usersIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrGetChatForUsers")
	}

	var r0 *clientmodels.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) (*clientmodels.Chat, error)); ok {
		return returnFunc(usersIDs)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) *clientmodels.Chat); ok {
		r0 = returnFunc(usersIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(usersIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_CreateOrGetChatForUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrGetChatForUsers'
type MockClient_CreateOrGetChatForUsers_Call struct {
	*mock.Call
}

// CreateOrGetChatForUsers is a helper method to define mock.On call
//   - usersIDs
func (_e *MockClient_Expecter) CreateOrGetChatForUsers(usersIDs interface{}) *MockClient_CreateOrGetChatForUsers_Call {
	return &MockClient_CreateOrGetChatForUsers_Call{Call: _e.mock.On("CreateOrGetChatForUsers", usersIDs)}
}

func (_c *MockClient_CreateOrGetChatForUsers_Call) Run(run func(usersIDs []string)) *MockClient_CreateOrGetChatForUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockClient_CreateOrGetChatForUsers_Call) Return(chat *clientmodels.Chat, err error) *MockClient_CreateOrGetChatForUsers_Call {
	_c.Call.Return(chat, err)
	return _c
}

func (_c *MockClient_CreateOrGetChatForUsers_Call) RunAndReturn(run func(usersIDs []string) (*clientmodels.Chat, error)) *MockClient_CreateOrGetChatForUsers_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChatMessage provides a mock function for the type MockClient
func (_mock *MockClient) DeleteChatMessage(userID string, chatID string, msgID string) error {
	ret := _mock.Called(userID, chatID, msgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChatMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(userID, chatID, msgID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_DeleteChatMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChatMessage'
type MockClient_DeleteChatMessage_Call struct {
	*mock.Call
}

// DeleteChatMessage is a helper method to define mock.On call
//   - userID
//   - chatID
//   - msgID
func (_e *MockClient_Expecter) DeleteChatMessage(userID interface{}, chatID interface{}, msgID interface{}) *MockClient_DeleteChatMessage_Call {
	return &MockClient_DeleteChatMessage_Call{Call: _e.mock.On("DeleteChatMessage", userID, chatID, msgID)}
}

func (_c *MockClient_DeleteChatMessage_Call) Run(run func(userID string, chatID string, msgID string)) *MockClient_DeleteChatMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_DeleteChatMessage_Call) Return(err error) *MockClient_DeleteChatMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_DeleteChatMessage_Call) RunAndReturn(run func(userID string, chatID string, msgID string) error) *MockClient_DeleteChatMessage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMessage provides a mock function for the type MockClient
func (_mock *MockClient) DeleteMessage(teamID string, channelID string, parentID string, msgID string) error {
	ret := _mock.Called(teamID, channelID, parentID, msgID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = returnFunc(teamID, channelID, parentID, msgID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_DeleteMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessage'
type MockClient_DeleteMessage_Call struct {
	*mock.Call
}

// DeleteMessage is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - parentID
//   - msgID
func (_e *MockClient_Expecter) DeleteMessage(teamID interface{}, channelID interface{}, parentID interface{}, msgID interface{}) *MockClient_DeleteMessage_Call {
	return &MockClient_DeleteMessage_Call{Call: _e.mock.On("DeleteMessage", teamID, channelID, parentID, msgID)}
}

func (_c *MockClient_DeleteMessage_Call) Run(run func(teamID string, channelID string, parentID string, msgID string)) *MockClient_DeleteMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_DeleteMessage_Call) Return(err error) *MockClient_DeleteMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_DeleteMessage_Call) RunAndReturn(run func(teamID string, channelID string, parentID string, msgID string) error) *MockClient_DeleteMessage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscription provides a mock function for the type MockClient
func (_mock *MockClient) DeleteSubscription(subscriptionID string) error {
	ret := _mock.Called(subscriptionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(subscriptionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type MockClient_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - subscriptionID
func (_e *MockClient_Expecter) DeleteSubscription(subscriptionID interface{}) *MockClient_DeleteSubscription_Call {
	return &MockClient_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", subscriptionID)}
}

func (_c *MockClient_DeleteSubscription_Call) Run(run func(subscriptionID string)) *MockClient_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_DeleteSubscription_Call) Return(err error) *MockClient_DeleteSubscription_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_DeleteSubscription_Call) RunAndReturn(run func(subscriptionID string) error) *MockClient_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// GetApp provides a mock function for the type MockClient
func (_mock *MockClient) GetApp(applicationID string) (*clientmodels.App, error) {
	ret := _mock.Called(applicationID)

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *clientmodels.App
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*clientmodels.App, error)); ok {
		return returnFunc(applicationID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *clientmodels.App); ok {
		r0 = returnFunc(applicationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.App)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(applicationID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApp'
type MockClient_GetApp_Call struct {
	*mock.Call
}

// GetApp is a helper method to define mock.On call
//   - applicationID
func (_e *MockClient_Expecter) GetApp(applicationID interface{}) *MockClient_GetApp_Call {
	return &MockClient_GetApp_Call{Call: _e.mock.On("GetApp", applicationID)}
}

func (_c *MockClient_GetApp_Call) Run(run func(applicationID string)) *MockClient_GetApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetApp_Call) Return(app *clientmodels.App, err error) *MockClient_GetApp_Call {
	_c.Call.Return(app, err)
	return _c
}

func (_c *MockClient_GetApp_Call) RunAndReturn(run func(applicationID string) (*clientmodels.App, error)) *MockClient_GetApp_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelInTeam provides a mock function for the type MockClient
func (_mock *MockClient) GetChannelInTeam(teamID string, channelID string) (*clientmodels.Channel, error) {
	ret := _mock.Called(teamID, channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelInTeam")
	}

	var r0 *clientmodels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*clientmodels.Channel, error)); ok {
		return returnFunc(teamID, channelID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *clientmodels.Channel); ok {
		r0 = returnFunc(teamID, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Channel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(teamID, channelID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetChannelInTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelInTeam'
type MockClient_GetChannelInTeam_Call struct {
	*mock.Call
}

// GetChannelInTeam is a helper method to define mock.On call
//   - teamID
//   - channelID
func (_e *MockClient_Expecter) GetChannelInTeam(teamID interface{}, channelID interface{}) *MockClient_GetChannelInTeam_Call {
	return &MockClient_GetChannelInTeam_Call{Call: _e.mock.On("GetChannelInTeam", teamID, channelID)}
}

func (_c *MockClient_GetChannelInTeam_Call) Run(run func(teamID string, channelID string)) *MockClient_GetChannelInTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetChannelInTeam_Call) Return(channel *clientmodels.Channel, err error) *MockClient_GetChannelInTeam_Call {
	_c.Call.Return(channel, err)
	return _c
}

func (_c *MockClient_GetChannelInTeam_Call) RunAndReturn(run func(teamID string, channelID string) (*clientmodels.Channel, error)) *MockClient_GetChannelInTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelsInTeam provides a mock function for the type MockClient
func (_mock *MockClient) GetChannelsInTeam(teamID string, filterQuery string) ([]*clientmodels.Channel, error) {
	ret := _mock.Called(teamID, filterQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelsInTeam")
	}

	var r0 []*clientmodels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]*clientmodels.Channel, error)); ok {
		return returnFunc(teamID, filterQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []*clientmodels.Channel); ok {
		r0 = returnFunc(teamID, filterQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Channel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(teamID, filterQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetChannelsInTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelsInTeam'
type MockClient_GetChannelsInTeam_Call struct {
	*mock.Call
}

// GetChannelsInTeam is a helper method to define mock.On call
//   - teamID
//   - filterQuery
func (_e *MockClient_Expecter) GetChannelsInTeam(teamID interface{}, filterQuery interface{}) *MockClient_GetChannelsInTeam_Call {
	return &MockClient_GetChannelsInTeam_Call{Call: _e.mock.On("GetChannelsInTeam", teamID, filterQuery)}
}

func (_c *MockClient_GetChannelsInTeam_Call) Run(run func(teamID string, filterQuery string)) *MockClient_GetChannelsInTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetChannelsInTeam_Call) Return(channels []*clientmodels.Channel, err error) *MockClient_GetChannelsInTeam_Call {
	_c.Call.Return(channels, err)
	return _c
}

func (_c *MockClient_GetChannelsInTeam_Call) RunAndReturn(run func(teamID string, filterQuery string) ([]*clientmodels.Channel, error)) *MockClient_GetChannelsInTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetChat provides a mock function for the type MockClient
func (_mock *MockClient) GetChat(chatID string) (*clientmodels.Chat, error) {
	ret := _mock.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetChat")
	}

	var r0 *clientmodels.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*clientmodels.Chat, error)); ok {
		return returnFunc(chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *clientmodels.Chat); ok {
		r0 = returnFunc(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChat'
type MockClient_GetChat_Call struct {
	*mock.Call
}

// GetChat is a helper method to define mock.On call
//   - chatID
func (_e *MockClient_Expecter) GetChat(chatID interface{}) *MockClient_GetChat_Call {
	return &MockClient_GetChat_Call{Call: _e.mock.On("GetChat", chatID)}
}

func (_c *MockClient_GetChat_Call) Run(run func(chatID string)) *MockClient_GetChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetChat_Call) Return(chat *clientmodels.Chat, err error) *MockClient_GetChat_Call {
	_c.Call.Return(chat, err)
	return _c
}

func (_c *MockClient_GetChat_Call) RunAndReturn(run func(chatID string) (*clientmodels.Chat, error)) *MockClient_GetChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatMessage provides a mock function for the type MockClient
func (_mock *MockClient) GetChatMessage(chatID string, messageID string) (*clientmodels.Message, error) {
	ret := _mock.Called(chatID, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*clientmodels.Message, error)); ok {
		return returnFunc(chatID, messageID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *clientmodels.Message); ok {
		r0 = returnFunc(chatID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(chatID, messageID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetChatMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatMessage'
type MockClient_GetChatMessage_Call struct {
	*mock.Call
}

// GetChatMessage is a helper method to define mock.On call
//   - chatID
//   - messageID
func (_e *MockClient_Expecter) GetChatMessage(chatID interface{}, messageID interface{}) *MockClient_GetChatMessage_Call {
	return &MockClient_GetChatMessage_Call{Call: _e.mock.On("GetChatMessage", chatID, messageID)}
}

func (_c *MockClient_GetChatMessage_Call) Run(run func(chatID string, messageID string)) *MockClient_GetChatMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetChatMessage_Call) Return(message *clientmodels.Message, err error) *MockClient_GetChatMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockClient_GetChatMessage_Call) RunAndReturn(run func(chatID string, messageID string) (*clientmodels.Message, error)) *MockClient_GetChatMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeSnippet provides a mock function for the type MockClient
func (_mock *MockClient) GetCodeSnippet(url string) (string, error) {
	ret := _mock.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeSnippet")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(url)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(url)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetCodeSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeSnippet'
type MockClient_GetCodeSnippet_Call struct {
	*mock.Call
}

// GetCodeSnippet is a helper method to define mock.On call
//   - url
func (_e *MockClient_Expecter) GetCodeSnippet(url interface{}) *MockClient_GetCodeSnippet_Call {
	return &MockClient_GetCodeSnippet_Call{Call: _e.mock.On("GetCodeSnippet", url)}
}

func (_c *MockClient_GetCodeSnippet_Call) Run(run func(url string)) *MockClient_GetCodeSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetCodeSnippet_Call) Return(s string, err error) *MockClient_GetCodeSnippet_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockClient_GetCodeSnippet_Call) RunAndReturn(run func(url string) (string, error)) *MockClient_GetCodeSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileContent provides a mock function for the type MockClient
func (_mock *MockClient) GetFileContent(downloadURL string) ([]byte, error) {
	ret := _mock.Called(downloadURL)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContent")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(downloadURL)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(downloadURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(downloadURL)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetFileContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileContent'
type MockClient_GetFileContent_Call struct {
	*mock.Call
}

// GetFileContent is a helper method to define mock.On call
//   - downloadURL
func (_e *MockClient_Expecter) GetFileContent(downloadURL interface{}) *MockClient_GetFileContent_Call {
	return &MockClient_GetFileContent_Call{Call: _e.mock.On("GetFileContent", downloadURL)}
}

func (_c *MockClient_GetFileContent_Call) Run(run func(downloadURL string)) *MockClient_GetFileContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetFileContent_Call) Return(bytes []byte, err error) *MockClient_GetFileContent_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockClient_GetFileContent_Call) RunAndReturn(run func(downloadURL string) ([]byte, error)) *MockClient_GetFileContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileContentStream provides a mock function for the type MockClient
func (_mock *MockClient) GetFileContentStream(downloadURL string, writer *io.PipeWriter, bufferSize int64) {
	_mock.Called(downloadURL, writer, bufferSize)
	return
}

// MockClient_GetFileContentStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileContentStream'
type MockClient_GetFileContentStream_Call struct {
	*mock.Call
}

// GetFileContentStream is a helper method to define mock.On call
//   - downloadURL
//   - writer
//   - bufferSize
func (_e *MockClient_Expecter) GetFileContentStream(downloadURL interface{}, writer interface{}, bufferSize interface{}) *MockClient_GetFileContentStream_Call {
	return &MockClient_GetFileContentStream_Call{Call: _e.mock.On("GetFileContentStream", downloadURL, writer, bufferSize)}
}

func (_c *MockClient_GetFileContentStream_Call) Run(run func(downloadURL string, writer *io.PipeWriter, bufferSize int64)) *MockClient_GetFileContentStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*io.PipeWriter), args[2].(int64))
	})
	return _c
}

func (_c *MockClient_GetFileContentStream_Call) Return() *MockClient_GetFileContentStream_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_GetFileContentStream_Call) RunAndReturn(run func(downloadURL string, writer *io.PipeWriter, bufferSize int64)) *MockClient_GetFileContentStream_Call {
	_c.Run(run)
	return _c
}

// GetFileSizeAndDownloadURL provides a mock function for the type MockClient
func (_mock *MockClient) GetFileSizeAndDownloadURL(weburl string) (int64, string, error) {
	ret := _mock.Called(weburl)

	if len(ret) == 0 {
		panic("no return value specified for GetFileSizeAndDownloadURL")
	}

	var r0 int64
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (int64, string, error)); ok {
		return returnFunc(weburl)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int64); ok {
		r0 = returnFunc(weburl)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(weburl)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(weburl)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockClient_GetFileSizeAndDownloadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileSizeAndDownloadURL'
type MockClient_GetFileSizeAndDownloadURL_Call struct {
	*mock.Call
}

// GetFileSizeAndDownloadURL is a helper method to define mock.On call
//   - weburl
func (_e *MockClient_Expecter) GetFileSizeAndDownloadURL(weburl interface{}) *MockClient_GetFileSizeAndDownloadURL_Call {
	return &MockClient_GetFileSizeAndDownloadURL_Call{Call: _e.mock.On("GetFileSizeAndDownloadURL", weburl)}
}

func (_c *MockClient_GetFileSizeAndDownloadURL_Call) Run(run func(weburl string)) *MockClient_GetFileSizeAndDownloadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetFileSizeAndDownloadURL_Call) Return(n int64, s string, err error) *MockClient_GetFileSizeAndDownloadURL_Call {
	_c.Call.Return(n, s, err)
	return _c
}

func (_c *MockClient_GetFileSizeAndDownloadURL_Call) RunAndReturn(run func(weburl string) (int64, string, error)) *MockClient_GetFileSizeAndDownloadURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostedFileContent provides a mock function for the type MockClient
func (_mock *MockClient) GetHostedFileContent(activityIDs *clientmodels.ActivityIDs) ([]byte, error) {
	ret := _mock.Called(activityIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetHostedFileContent")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*clientmodels.ActivityIDs) ([]byte, error)); ok {
		return returnFunc(activityIDs)
	}
	if returnFunc, ok := ret.Get(0).(func(*clientmodels.ActivityIDs) []byte); ok {
		r0 = returnFunc(activityIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*clientmodels.ActivityIDs) error); ok {
		r1 = returnFunc(activityIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetHostedFileContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostedFileContent'
type MockClient_GetHostedFileContent_Call struct {
	*mock.Call
}

// GetHostedFileContent is a helper method to define mock.On call
//   - activityIDs
func (_e *MockClient_Expecter) GetHostedFileContent(activityIDs interface{}) *MockClient_GetHostedFileContent_Call {
	return &MockClient_GetHostedFileContent_Call{Call: _e.mock.On("GetHostedFileContent", activityIDs)}
}

func (_c *MockClient_GetHostedFileContent_Call) Run(run func(activityIDs *clientmodels.ActivityIDs)) *MockClient_GetHostedFileContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*clientmodels.ActivityIDs))
	})
	return _c
}

func (_c *MockClient_GetHostedFileContent_Call) Return(bytes []byte, err error) *MockClient_GetHostedFileContent_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockClient_GetHostedFileContent_Call) RunAndReturn(run func(activityIDs *clientmodels.ActivityIDs) ([]byte, error)) *MockClient_GetHostedFileContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetMe provides a mock function for the type MockClient
func (_mock *MockClient) GetMe() (*clientmodels.User, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMe")
	}

	var r0 *clientmodels.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*clientmodels.User, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *clientmodels.User); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type MockClient_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetMe() *MockClient_GetMe_Call {
	return &MockClient_GetMe_Call{Call: _e.mock.On("GetMe")}
}

func (_c *MockClient_GetMe_Call) Run(run func()) *MockClient_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetMe_Call) Return(user *clientmodels.User, err error) *MockClient_GetMe_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockClient_GetMe_Call) RunAndReturn(run func() (*clientmodels.User, error)) *MockClient_GetMe_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessage provides a mock function for the type MockClient
func (_mock *MockClient) GetMessage(teamID string, channelID string, messageID string) (*clientmodels.Message, error) {
	ret := _mock.Called(teamID, channelID, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (*clientmodels.Message, error)); ok {
		return returnFunc(teamID, channelID, messageID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) *clientmodels.Message); ok {
		r0 = returnFunc(teamID, channelID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(teamID, channelID, messageID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type MockClient_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - messageID
func (_e *MockClient_Expecter) GetMessage(teamID interface{}, channelID interface{}, messageID interface{}) *MockClient_GetMessage_Call {
	return &MockClient_GetMessage_Call{Call: _e.mock.On("GetMessage", teamID, channelID, messageID)}
}

func (_c *MockClient_GetMessage_Call) Run(run func(teamID string, channelID string, messageID string)) *MockClient_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetMessage_Call) Return(message *clientmodels.Message, err error) *MockClient_GetMessage_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockClient_GetMessage_Call) RunAndReturn(run func(teamID string, channelID string, messageID string) (*clientmodels.Message, error)) *MockClient_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMyID provides a mock function for the type MockClient
func (_mock *MockClient) GetMyID() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMyID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetMyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMyID'
type MockClient_GetMyID_Call struct {
	*mock.Call
}

// GetMyID is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetMyID() *MockClient_GetMyID_Call {
	return &MockClient_GetMyID_Call{Call: _e.mock.On("GetMyID")}
}

func (_c *MockClient_GetMyID_Call) Run(run func()) *MockClient_GetMyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetMyID_Call) Return(s string, err error) *MockClient_GetMyID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockClient_GetMyID_Call) RunAndReturn(run func() (string, error)) *MockClient_GetMyID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPresencesForUsers provides a mock function for the type MockClient
func (_mock *MockClient) GetPresencesForUsers(userIDs []string) (map[string]clientmodels.Presence, error) {
	ret := _mock.Called(userIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetPresencesForUsers")
	}

	var r0 map[string]clientmodels.Presence
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) (map[string]clientmodels.Presence, error)); ok {
		return returnFunc(userIDs)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) map[string]clientmodels.Presence); ok {
		r0 = returnFunc(userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]clientmodels.Presence)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(userIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPresencesForUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPresencesForUsers'
type MockClient_GetPresencesForUsers_Call struct {
	*mock.Call
}

// GetPresencesForUsers is a helper method to define mock.On call
//   - userIDs
func (_e *MockClient_Expecter) GetPresencesForUsers(userIDs interface{}) *MockClient_GetPresencesForUsers_Call {
	return &MockClient_GetPresencesForUsers_Call{Call: _e.mock.On("GetPresencesForUsers", userIDs)}
}

func (_c *MockClient_GetPresencesForUsers_Call) Run(run func(userIDs []string)) *MockClient_GetPresencesForUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockClient_GetPresencesForUsers_Call) Return(stringToPresence map[string]clientmodels.Presence, err error) *MockClient_GetPresencesForUsers_Call {
	_c.Call.Return(stringToPresence, err)
	return _c
}

func (_c *MockClient_GetPresencesForUsers_Call) RunAndReturn(run func(userIDs []string) (map[string]clientmodels.Presence, error)) *MockClient_GetPresencesForUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetReply provides a mock function for the type MockClient
func (_mock *MockClient) GetReply(teamID string, channelID string, messageID string, replyID string) (*clientmodels.Message, error) {
	ret := _mock.Called(teamID, channelID, messageID, replyID)

	if len(ret) == 0 {
		panic("no return value specified for GetReply")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) (*clientmodels.Message, error)); ok {
		return returnFunc(teamID, channelID, messageID, replyID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) *clientmodels.Message); ok {
		r0 = returnFunc(teamID, channelID, messageID, replyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = returnFunc(teamID, channelID, messageID, replyID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetReply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReply'
type MockClient_GetReply_Call struct {
	*mock.Call
}

// GetReply is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - messageID
//   - replyID
func (_e *MockClient_Expecter) GetReply(teamID interface{}, channelID interface{}, messageID interface{}, replyID interface{}) *MockClient_GetReply_Call {
	return &MockClient_GetReply_Call{Call: _e.mock.On("GetReply", teamID, channelID, messageID, replyID)}
}

func (_c *MockClient_GetReply_Call) Run(run func(teamID string, channelID string, messageID string, replyID string)) *MockClient_GetReply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_GetReply_Call) Return(message *clientmodels.Message, err error) *MockClient_GetReply_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockClient_GetReply_Call) RunAndReturn(run func(teamID string, channelID string, messageID string, replyID string) (*clientmodels.Message, error)) *MockClient_GetReply_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function for the type MockClient
func (_mock *MockClient) GetTeam(teamID string) (*clientmodels.Team, error) {
	ret := _mock.Called(teamID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *clientmodels.Team
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*clientmodels.Team, error)); ok {
		return returnFunc(teamID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *clientmodels.Team); ok {
		r0 = returnFunc(teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(teamID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockClient_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - teamID
func (_e *MockClient_Expecter) GetTeam(teamID interface{}) *MockClient_GetTeam_Call {
	return &MockClient_GetTeam_Call{Call: _e.mock.On("GetTeam", teamID)}
}

func (_c *MockClient_GetTeam_Call) Run(run func(teamID string)) *MockClient_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetTeam_Call) Return(team *clientmodels.Team, err error) *MockClient_GetTeam_Call {
	_c.Call.Return(team, err)
	return _c
}

func (_c *MockClient_GetTeam_Call) RunAndReturn(run func(teamID string) (*clientmodels.Team, error)) *MockClient_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function for the type MockClient
func (_mock *MockClient) GetTeams(filterQuery string) ([]*clientmodels.Team, error) {
	ret := _mock.Called(filterQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []*clientmodels.Team
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*clientmodels.Team, error)); ok {
		return returnFunc(filterQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*clientmodels.Team); ok {
		r0 = returnFunc(filterQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(filterQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockClient_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - filterQuery
func (_e *MockClient_Expecter) GetTeams(filterQuery interface{}) *MockClient_GetTeams_Call {
	return &MockClient_GetTeams_Call{Call: _e.mock.On("GetTeams", filterQuery)}
}

func (_c *MockClient_GetTeams_Call) Run(run func(filterQuery string)) *MockClient_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetTeams_Call) Return(teams []*clientmodels.Team, err error) *MockClient_GetTeams_Call {
	_c.Call.Return(teams, err)
	return _c
}

func (_c *MockClient_GetTeams_Call) RunAndReturn(run func(filterQuery string) ([]*clientmodels.Team, error)) *MockClient_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsAppIDByExternalID provides a mock function for the type MockClient
func (_mock *MockClient) GetTeamsAppIDByExternalID(externalID string) (string, error) {
	ret := _mock.Called(externalID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsAppIDByExternalID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(externalID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(externalID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(externalID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTeamsAppIDByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsAppIDByExternalID'
type MockClient_GetTeamsAppIDByExternalID_Call struct {
	*mock.Call
}

// GetTeamsAppIDByExternalID is a helper method to define mock.On call
//   - externalID
func (_e *MockClient_Expecter) GetTeamsAppIDByExternalID(externalID interface{}) *MockClient_GetTeamsAppIDByExternalID_Call {
	return &MockClient_GetTeamsAppIDByExternalID_Call{Call: _e.mock.On("GetTeamsAppIDByExternalID", externalID)}
}

func (_c *MockClient_GetTeamsAppIDByExternalID_Call) Run(run func(externalID string)) *MockClient_GetTeamsAppIDByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetTeamsAppIDByExternalID_Call) Return(s string, err error) *MockClient_GetTeamsAppIDByExternalID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockClient_GetTeamsAppIDByExternalID_Call) RunAndReturn(run func(externalID string) (string, error)) *MockClient_GetTeamsAppIDByExternalID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenantID provides a mock function for the type MockClient
func (_mock *MockClient) GetTenantID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTenantID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockClient_GetTenantID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantID'
type MockClient_GetTenantID_Call struct {
	*mock.Call
}

// GetTenantID is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetTenantID() *MockClient_GetTenantID_Call {
	return &MockClient_GetTenantID_Call{Call: _e.mock.On("GetTenantID")}
}

func (_c *MockClient_GetTenantID_Call) Run(run func()) *MockClient_GetTenantID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetTenantID_Call) Return(s string) *MockClient_GetTenantID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockClient_GetTenantID_Call) RunAndReturn(run func() string) *MockClient_GetTenantID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockClient
func (_mock *MockClient) GetUser(userID string) (*clientmodels.User, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *clientmodels.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*clientmodels.User, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *clientmodels.User); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - userID
func (_e *MockClient_Expecter) GetUser(userID interface{}) *MockClient_GetUser_Call {
	return &MockClient_GetUser_Call{Call: _e.mock.On("GetUser", userID)}
}

func (_c *MockClient_GetUser_Call) Run(run func(userID string)) *MockClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetUser_Call) Return(user *clientmodels.User, err error) *MockClient_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockClient_GetUser_Call) RunAndReturn(run func(userID string) (*clientmodels.User, error)) *MockClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAvatar provides a mock function for the type MockClient
func (_mock *MockClient) GetUserAvatar(userID string) ([]byte, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAvatar")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUserAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAvatar'
type MockClient_GetUserAvatar_Call struct {
	*mock.Call
}

// GetUserAvatar is a helper method to define mock.On call
//   - userID
func (_e *MockClient_Expecter) GetUserAvatar(userID interface{}) *MockClient_GetUserAvatar_Call {
	return &MockClient_GetUserAvatar_Call{Call: _e.mock.On("GetUserAvatar", userID)}
}

func (_c *MockClient_GetUserAvatar_Call) Run(run func(userID string)) *MockClient_GetUserAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetUserAvatar_Call) Return(bytes []byte, err error) *MockClient_GetUserAvatar_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockClient_GetUserAvatar_Call) RunAndReturn(run func(userID string) ([]byte, error)) *MockClient_GetUserAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// ListChannelMessages provides a mock function for the type MockClient
func (_mock *MockClient) ListChannelMessages(teamID string, channelID string, since time.Time) ([]*clientmodels.Message, error) {
	ret := _mock.Called(teamID, channelID, since)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMessages")
	}

	var r0 []*clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, time.Time) ([]*clientmodels.Message, error)); ok {
		return returnFunc(teamID, channelID, since)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, time.Time) []*clientmodels.Message); ok {
		r0 = returnFunc(teamID, channelID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, time.Time) error); ok {
		r1 = returnFunc(teamID, channelID, since)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListChannelMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChannelMessages'
type MockClient_ListChannelMessages_Call struct {
	*mock.Call
}

// ListChannelMessages is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - since
func (_e *MockClient_Expecter) ListChannelMessages(teamID interface{}, channelID interface{}, since interface{}) *MockClient_ListChannelMessages_Call {
	return &MockClient_ListChannelMessages_Call{Call: _e.mock.On("ListChannelMessages", teamID, channelID, since)}
}

func (_c *MockClient_ListChannelMessages_Call) Run(run func(teamID string, channelID string, since time.Time)) *MockClient_ListChannelMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockClient_ListChannelMessages_Call) Return(messages []*clientmodels.Message, err error) *MockClient_ListChannelMessages_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockClient_ListChannelMessages_Call) RunAndReturn(run func(teamID string, channelID string, since time.Time) ([]*clientmodels.Message, error)) *MockClient_ListChannelMessages_Call {
	_c.Call.Return(run)
	return _c
}

// ListChannels provides a mock function for the type MockClient
func (_mock *MockClient) ListChannels(teamID string) ([]clientmodels.Channel, error) {
	ret := _mock.Called(teamID)

	if len(ret) == 0 {
		panic("no return value specified for ListChannels")
	}

	var r0 []clientmodels.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]clientmodels.Channel, error)); ok {
		return returnFunc(teamID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []clientmodels.Channel); ok {
		r0 = returnFunc(teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientmodels.Channel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(teamID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChannels'
type MockClient_ListChannels_Call struct {
	*mock.Call
}

// ListChannels is a helper method to define mock.On call
//   - teamID
func (_e *MockClient_Expecter) ListChannels(teamID interface{}) *MockClient_ListChannels_Call {
	return &MockClient_ListChannels_Call{Call: _e.mock.On("ListChannels", teamID)}
}

func (_c *MockClient_ListChannels_Call) Run(run func(teamID string)) *MockClient_ListChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_ListChannels_Call) Return(channels []clientmodels.Channel, err error) *MockClient_ListChannels_Call {
	_c.Call.Return(channels, err)
	return _c
}

func (_c *MockClient_ListChannels_Call) RunAndReturn(run func(teamID string) ([]clientmodels.Channel, error)) *MockClient_ListChannels_Call {
	_c.Call.Return(run)
	return _c
}

// ListChatMessages provides a mock function for the type MockClient
func (_mock *MockClient) ListChatMessages(chatID string, since time.Time) ([]*clientmodels.Message, error) {
	ret := _mock.Called(chatID, since)

	if len(ret) == 0 {
		panic("no return value specified for ListChatMessages")
	}

	var r0 []*clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, time.Time) ([]*clientmodels.Message, error)); ok {
		return returnFunc(chatID, since)
	}
	if returnFunc, ok := ret.Get(0).(func(string, time.Time) []*clientmodels.Message); ok {
		r0 = returnFunc(chatID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = returnFunc(chatID, since)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListChatMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListChatMessages'
type MockClient_ListChatMessages_Call struct {
	*mock.Call
}

// ListChatMessages is a helper method to define mock.On call
//   - chatID
//   - since
func (_e *MockClient_Expecter) ListChatMessages(chatID interface{}, since interface{}) *MockClient_ListChatMessages_Call {
	return &MockClient_ListChatMessages_Call{Call: _e.mock.On("ListChatMessages", chatID, since)}
}

func (_c *MockClient_ListChatMessages_Call) Run(run func(chatID string, since time.Time)) *MockClient_ListChatMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *MockClient_ListChatMessages_Call) Return(messages []*clientmodels.Message, err error) *MockClient_ListChatMessages_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockClient_ListChatMessages_Call) RunAndReturn(run func(chatID string, since time.Time) ([]*clientmodels.Message, error)) *MockClient_ListChatMessages_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptions provides a mock function for the type MockClient
func (_mock *MockClient) ListSubscriptions() ([]*clientmodels.Subscription, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 []*clientmodels.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*clientmodels.Subscription, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*clientmodels.Subscription); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clientmodels.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptions'
type MockClient_ListSubscriptions_Call struct {
	*mock.Call
}

// ListSubscriptions is a helper method to define mock.On call
func (_e *MockClient_Expecter) ListSubscriptions() *MockClient_ListSubscriptions_Call {
	return &MockClient_ListSubscriptions_Call{Call: _e.mock.On("ListSubscriptions")}
}

func (_c *MockClient_ListSubscriptions_Call) Run(run func()) *MockClient_ListSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ListSubscriptions_Call) Return(subscriptions []*clientmodels.Subscription, err error) *MockClient_ListSubscriptions_Call {
	_c.Call.Return(subscriptions, err)
	return _c
}

func (_c *MockClient_ListSubscriptions_Call) RunAndReturn(run func() ([]*clientmodels.Subscription, error)) *MockClient_ListSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeams provides a mock function for the type MockClient
func (_mock *MockClient) ListTeams() ([]clientmodels.Team, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListTeams")
	}

	var r0 []clientmodels.Team
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]clientmodels.Team, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []clientmodels.Team); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientmodels.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeams'
type MockClient_ListTeams_Call struct {
	*mock.Call
}

// ListTeams is a helper method to define mock.On call
func (_e *MockClient_Expecter) ListTeams() *MockClient_ListTeams_Call {
	return &MockClient_ListTeams_Call{Call: _e.mock.On("ListTeams")}
}

func (_c *MockClient_ListTeams_Call) Run(run func()) *MockClient_ListTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ListTeams_Call) Return(teams []clientmodels.Team, err error) *MockClient_ListTeams_Call {
	_c.Call.Return(teams, err)
	return _c
}

func (_c *MockClient_ListTeams_Call) RunAndReturn(run func() ([]clientmodels.Team, error)) *MockClient_ListTeams_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockClient
func (_mock *MockClient) ListUsers() ([]clientmodels.User, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []clientmodels.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]clientmodels.User, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []clientmodels.User); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clientmodels.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockClient_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
func (_e *MockClient_Expecter) ListUsers() *MockClient_ListUsers_Call {
	return &MockClient_ListUsers_Call{Call: _e.mock.On("ListUsers")}
}

func (_c *MockClient_ListUsers_Call) Run(run func()) *MockClient_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ListUsers_Call) Return(users []clientmodels.User, err error) *MockClient_ListUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockClient_ListUsers_Call) RunAndReturn(run func() ([]clientmodels.User, error)) *MockClient_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshSubscription provides a mock function for the type MockClient
func (_mock *MockClient) RefreshSubscription(subscriptionID string) (*time.Time, error) {
	ret := _mock.Called(subscriptionID)

	if len(ret) == 0 {
		panic("no return value specified for RefreshSubscription")
	}

	var r0 *time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*time.Time, error)); ok {
		return returnFunc(subscriptionID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *time.Time); ok {
		r0 = returnFunc(subscriptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(subscriptionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_RefreshSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshSubscription'
type MockClient_RefreshSubscription_Call struct {
	*mock.Call
}

// RefreshSubscription is a helper method to define mock.On call
//   - subscriptionID
func (_e *MockClient_Expecter) RefreshSubscription(subscriptionID interface{}) *MockClient_RefreshSubscription_Call {
	return &MockClient_RefreshSubscription_Call{Call: _e.mock.On("RefreshSubscription", subscriptionID)}
}

func (_c *MockClient_RefreshSubscription_Call) Run(run func(subscriptionID string)) *MockClient_RefreshSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_RefreshSubscription_Call) Return(time1 *time.Time, err error) *MockClient_RefreshSubscription_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *MockClient_RefreshSubscription_Call) RunAndReturn(run func(subscriptionID string) (*time.Time, error)) *MockClient_RefreshSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockClient
func (_mock *MockClient) RefreshToken(token *oauth2.Token) (*oauth2.Token, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *oauth2.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*oauth2.Token) (*oauth2.Token, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(*oauth2.Token) *oauth2.Token); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*oauth2.Token) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockClient_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - token
func (_e *MockClient_Expecter) RefreshToken(token interface{}) *MockClient_RefreshToken_Call {
	return &MockClient_RefreshToken_Call{Call: _e.mock.On("RefreshToken", token)}
}

func (_c *MockClient_RefreshToken_Call) Run(run func(token *oauth2.Token)) *MockClient_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*oauth2.Token))
	})
	return _c
}

func (_c *MockClient_RefreshToken_Call) Return(token1 *oauth2.Token, err error) *MockClient_RefreshToken_Call {
	_c.Call.Return(token1, err)
	return _c
}

func (_c *MockClient_RefreshToken_Call) RunAndReturn(run func(token *oauth2.Token) (*oauth2.Token, error)) *MockClient_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SendChat provides a mock function for the type MockClient
func (_mock *MockClient) SendChat(chatID string, message string, parentMessage *clientmodels.Message, attachments []*clientmodels.Attachment, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error) {
	ret := _mock.Called(chatID, message, parentMessage, attachments, mentions)

	if len(ret) == 0 {
		panic("no return value specified for SendChat")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, *clientmodels.Message, []*clientmodels.Attachment, []models.ChatMessageMentionable) (*clientmodels.Message, error)); ok {
		return returnFunc(chatID, message, parentMessage, attachments, mentions)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, *clientmodels.Message, []*clientmodels.Attachment, []models.ChatMessageMentionable) *clientmodels.Message); ok {
		r0 = returnFunc(chatID, message, parentMessage, attachments, mentions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, *clientmodels.Message, []*clientmodels.Attachment, []models.ChatMessageMentionable) error); ok {
		r1 = returnFunc(chatID, message, parentMessage, attachments, mentions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SendChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendChat'
type MockClient_SendChat_Call struct {
	*mock.Call
}

// SendChat is a helper method to define mock.On call
//   - chatID
//   - message
//   - parentMessage
//   - attachments
//   - mentions
func (_e *MockClient_Expecter) SendChat(chatID interface{}, message interface{}, parentMessage interface{}, attachments interface{}, mentions interface{}) *MockClient_SendChat_Call {
	return &MockClient_SendChat_Call{Call: _e.mock.On("SendChat", chatID, message, parentMessage, attachments, mentions)}
}

func (_c *MockClient_SendChat_Call) Run(run func(chatID string, message string, parentMessage *clientmodels.Message, attachments []*clientmodels.Attachment, mentions []models.ChatMessageMentionable)) *MockClient_SendChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*clientmodels.Message), args[3].([]*clientmodels.Attachment), args[4].([]models.ChatMessageMentionable))
	})
	return _c
}

func (_c *MockClient_SendChat_Call) Return(message1 *clientmodels.Message, err error) *MockClient_SendChat_Call {
	_c.Call.Return(message1, err)
	return _c
}

func (_c *MockClient_SendChat_Call) RunAndReturn(run func(chatID string, message string, parentMessage *clientmodels.Message, attachments []*clientmodels.Attachment, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error)) *MockClient_SendChat_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function for the type MockClient
func (_mock *MockClient) SendMessage(teamID string, channelID string, parentID string, message string) (*clientmodels.Message, error) {
	ret := _mock.Called(teamID, channelID, parentID, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) (*clientmodels.Message, error)); ok {
		return returnFunc(teamID, channelID, parentID, message)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) *clientmodels.Message); ok {
		r0 = returnFunc(teamID, channelID, parentID, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = returnFunc(teamID, channelID, parentID, message)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockClient_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - parentID
//   - message
func (_e *MockClient_Expecter) SendMessage(teamID interface{}, channelID interface{}, parentID interface{}, message interface{}) *MockClient_SendMessage_Call {
	return &MockClient_SendMessage_Call{Call: _e.mock.On("SendMessage", teamID, channelID, parentID, message)}
}

func (_c *MockClient_SendMessage_Call) Run(run func(teamID string, channelID string, parentID string, message string)) *MockClient_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_SendMessage_Call) Return(message1 *clientmodels.Message, err error) *MockClient_SendMessage_Call {
	_c.Call.Return(message1, err)
	return _c
}

func (_c *MockClient_SendMessage_Call) RunAndReturn(run func(teamID string, channelID string, parentID string, message string) (*clientmodels.Message, error)) *MockClient_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessageWithAttachments provides a mock function for the type MockClient
func (_mock *MockClient) SendMessageWithAttachments(teamID string, channelID string, parentID string, message string, attachments []*clientmodels.Attachment, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error) {
	ret := _mock.Called(teamID, channelID, parentID, message, attachments, mentions)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageWithAttachments")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, []*clientmodels.Attachment, []models.ChatMessageMentionable) (*clientmodels.Message, error)); ok {
		return returnFunc(teamID, channelID, parentID, message, attachments, mentions)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, []*clientmodels.Attachment, []models.ChatMessageMentionable) *clientmodels.Message); ok {
		r0 = returnFunc(teamID, channelID, parentID, message, attachments, mentions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, []*clientmodels.Attachment, []models.ChatMessageMentionable) error); ok {
		r1 = returnFunc(teamID, channelID, parentID, message, attachments, mentions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SendMessageWithAttachments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessageWithAttachments'
type MockClient_SendMessageWithAttachments_Call struct {
	*mock.Call
}

// SendMessageWithAttachments is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - parentID
//   - message
//   - attachments
//   - mentions
func (_e *MockClient_Expecter) SendMessageWithAttachments(teamID interface{}, channelID interface{}, parentID interface{}, message interface{}, attachments interface{}, mentions interface{}) *MockClient_SendMessageWithAttachments_Call {
	return &MockClient_SendMessageWithAttachments_Call{Call: _e.mock.On("SendMessageWithAttachments", teamID, channelID, parentID, message, attachments, mentions)}
}

func (_c *MockClient_SendMessageWithAttachments_Call) Run(run func(teamID string, channelID string, parentID string, message string, attachments []*clientmodels.Attachment, mentions []models.ChatMessageMentionable)) *MockClient_SendMessageWithAttachments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].([]*clientmodels.Attachment), args[5].([]models.ChatMessageMentionable))
	})
	return _c
}

func (_c *MockClient_SendMessageWithAttachments_Call) Return(message1 *clientmodels.Message, err error) *MockClient_SendMessageWithAttachments_Call {
	_c.Call.Return(message1, err)
	return _c
}

func (_c *MockClient_SendMessageWithAttachments_Call) RunAndReturn(run func(teamID string, channelID string, parentID string, message string, attachments []*clientmodels.Attachment, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error)) *MockClient_SendMessageWithAttachments_Call {
	_c.Call.Return(run)
	return _c
}

// SendUserActivity provides a mock function for the type MockClient
func (_mock *MockClient) SendUserActivity(userIDs []string, activityType string, message string, webURL url.URL, params map[string]string) error {
	ret := _mock.Called(userIDs, activityType, message, webURL, params)

	if len(ret) == 0 {
		panic("no return value specified for SendUserActivity")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]string, string, string, url.URL, map[string]string) error); ok {
		r0 = returnFunc(userIDs, activityType, message, webURL, params)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_SendUserActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendUserActivity'
type MockClient_SendUserActivity_Call struct {
	*mock.Call
}

// SendUserActivity is a helper method to define mock.On call
//   - userIDs
//   - activityType
//   - message
//   - webURL
//   - params
func (_e *MockClient_Expecter) SendUserActivity(userIDs interface{}, activityType interface{}, message interface{}, webURL interface{}, params interface{}) *MockClient_SendUserActivity_Call {
	return &MockClient_SendUserActivity_Call{Call: _e.mock.On("SendUserActivity", userIDs, activityType, message, webURL, params)}
}

func (_c *MockClient_SendUserActivity_Call) Run(run func(userIDs []string, activityType string, message string, webURL url.URL, params map[string]string)) *MockClient_SendUserActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(string), args[3].(url.URL), args[4].(map[string]string))
	})
	return _c
}

func (_c *MockClient_SendUserActivity_Call) Return(err error) *MockClient_SendUserActivity_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_SendUserActivity_Call) RunAndReturn(run func(userIDs []string, activityType string, message string, webURL url.URL, params map[string]string) error) *MockClient_SendUserActivity_Call {
	_c.Call.Return(run)
	return _c
}

// SetChatReaction provides a mock function for the type MockClient
func (_mock *MockClient) SetChatReaction(chatID string, messageID string, userID string, emoji string) (*clientmodels.Message, error) {
	ret := _mock.Called(chatID, messageID, userID, emoji)

	if len(ret) == 0 {
		panic("no return value specified for SetChatReaction")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) (*clientmodels.Message, error)); ok {
		return returnFunc(chatID, messageID, userID, emoji)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) *clientmodels.Message); ok {
		r0 = returnFunc(chatID, messageID, userID, emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = returnFunc(chatID, messageID, userID, emoji)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SetChatReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetChatReaction'
type MockClient_SetChatReaction_Call struct {
	*mock.Call
}

// SetChatReaction is a helper method to define mock.On call
//   - chatID
//   - messageID
//   - userID
//   - emoji
func (_e *MockClient_Expecter) SetChatReaction(chatID interface{}, messageID interface{}, userID interface{}, emoji interface{}) *MockClient_SetChatReaction_Call {
	return &MockClient_SetChatReaction_Call{Call: _e.mock.On("SetChatReaction", chatID, messageID, userID, emoji)}
}

func (_c *MockClient_SetChatReaction_Call) Run(run func(chatID string, messageID string, userID string, emoji string)) *MockClient_SetChatReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_SetChatReaction_Call) Return(message *clientmodels.Message, err error) *MockClient_SetChatReaction_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockClient_SetChatReaction_Call) RunAndReturn(run func(chatID string, messageID string, userID string, emoji string) (*clientmodels.Message, error)) *MockClient_SetChatReaction_Call {
	_c.Call.Return(run)
	return _c
}

// SetReaction provides a mock function for the type MockClient
func (_mock *MockClient) SetReaction(teamID string, channelID string, parentID string, messageID string, userID string, emoji string) (*clientmodels.Message, error) {
	ret := _mock.Called(teamID, channelID, parentID, messageID, userID, emoji)

	if len(ret) == 0 {
		panic("no return value specified for SetReaction")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string, string) (*clientmodels.Message, error)); ok {
		return returnFunc(teamID, channelID, parentID, messageID, userID, emoji)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string, string) *clientmodels.Message); ok {
		r0 = returnFunc(teamID, channelID, parentID, messageID, userID, emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = returnFunc(teamID, channelID, parentID, messageID, userID, emoji)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SetReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReaction'
type MockClient_SetReaction_Call struct {
	*mock.Call
}

// SetReaction is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - parentID
//   - messageID
//   - userID
//   - emoji
func (_e *MockClient_Expecter) SetReaction(teamID interface{}, channelID interface{}, parentID interface{}, messageID interface{}, userID interface{}, emoji interface{}) *MockClient_SetReaction_Call {
	return &MockClient_SetReaction_Call{Call: _e.mock.On("SetReaction", teamID, channelID, parentID, messageID, userID, emoji)}
}

func (_c *MockClient_SetReaction_Call) Run(run func(teamID string, channelID string, parentID string, messageID string, userID string, emoji string)) *MockClient_SetReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockClient_SetReaction_Call) Return(message *clientmodels.Message, err error) *MockClient_SetReaction_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockClient_SetReaction_Call) RunAndReturn(run func(teamID string, channelID string, parentID string, messageID string, userID string, emoji string) (*clientmodels.Message, error)) *MockClient_SetReaction_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToChannel provides a mock function for the type MockClient
func (_mock *MockClient) SubscribeToChannel(teamID string, channelID string, baseURL string, webhookSecret string, certificate string) (*clientmodels.Subscription, error) {
	ret := _mock.Called(teamID, channelID, baseURL, webhookSecret, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToChannel")
	}

	var r0 *clientmodels.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string) (*clientmodels.Subscription, error)); ok {
		return returnFunc(teamID, channelID, baseURL, webhookSecret, certificate)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string) *clientmodels.Subscription); ok {
		r0 = returnFunc(teamID, channelID, baseURL, webhookSecret, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = returnFunc(teamID, channelID, baseURL, webhookSecret, certificate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SubscribeToChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToChannel'
type MockClient_SubscribeToChannel_Call struct {
	*mock.Call
}

// SubscribeToChannel is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - baseURL
//   - webhookSecret
//   - certificate
func (_e *MockClient_Expecter) SubscribeToChannel(teamID interface{}, channelID interface{}, baseURL interface{}, webhookSecret interface{}, certificate interface{}) *MockClient_SubscribeToChannel_Call {
	return &MockClient_SubscribeToChannel_Call{Call: _e.mock.On("SubscribeToChannel", teamID, channelID, baseURL, webhookSecret, certificate)}
}

func (_c *MockClient_SubscribeToChannel_Call) Run(run func(teamID string, channelID string, baseURL string, webhookSecret string, certificate string)) *MockClient_SubscribeToChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockClient_SubscribeToChannel_Call) Return(subscription *clientmodels.Subscription, err error) *MockClient_SubscribeToChannel_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockClient_SubscribeToChannel_Call) RunAndReturn(run func(teamID string, channelID string, baseURL string, webhookSecret string, certificate string) (*clientmodels.Subscription, error)) *MockClient_SubscribeToChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToChannels provides a mock function for the type MockClient
func (_mock *MockClient) SubscribeToChannels(baseURL string, webhookSecret string, pay bool, certificate string) (*clientmodels.Subscription, error) {
	ret := _mock.Called(baseURL, webhookSecret, pay, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToChannels")
	}

	var r0 *clientmodels.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, bool, string) (*clientmodels.Subscription, error)); ok {
		return returnFunc(baseURL, webhookSecret, pay, certificate)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, bool, string) *clientmodels.Subscription); ok {
		r0 = returnFunc(baseURL, webhookSecret, pay, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, bool, string) error); ok {
		r1 = returnFunc(baseURL, webhookSecret, pay, certificate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SubscribeToChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToChannels'
type MockClient_SubscribeToChannels_Call struct {
	*mock.Call
}

// SubscribeToChannels is a helper method to define mock.On call
//   - baseURL
//   - webhookSecret
//   - pay
//   - certificate
func (_e *MockClient_Expecter) SubscribeToChannels(baseURL interface{}, webhookSecret interface{}, pay interface{}, certificate interface{}) *MockClient_SubscribeToChannels_Call {
	return &MockClient_SubscribeToChannels_Call{Call: _e.mock.On("SubscribeToChannels", baseURL, webhookSecret, pay, certificate)}
}

func (_c *MockClient_SubscribeToChannels_Call) Run(run func(baseURL string, webhookSecret string, pay bool, certificate string)) *MockClient_SubscribeToChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool), args[3].(string))
	})
	return _c
}

func (_c *MockClient_SubscribeToChannels_Call) Return(subscription *clientmodels.Subscription, err error) *MockClient_SubscribeToChannels_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockClient_SubscribeToChannels_Call) RunAndReturn(run func(baseURL string, webhookSecret string, pay bool, certificate string) (*clientmodels.Subscription, error)) *MockClient_SubscribeToChannels_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToChats provides a mock function for the type MockClient
func (_mock *MockClient) SubscribeToChats(baseURL string, webhookSecret string, pay bool, certificate string) (*clientmodels.Subscription, error) {
	ret := _mock.Called(baseURL, webhookSecret, pay, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToChats")
	}

	var r0 *clientmodels.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, bool, string) (*clientmodels.Subscription, error)); ok {
		return returnFunc(baseURL, webhookSecret, pay, certificate)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, bool, string) *clientmodels.Subscription); ok {
		r0 = returnFunc(baseURL, webhookSecret, pay, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, bool, string) error); ok {
		r1 = returnFunc(baseURL, webhookSecret, pay, certificate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SubscribeToChats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToChats'
type MockClient_SubscribeToChats_Call struct {
	*mock.Call
}

// SubscribeToChats is a helper method to define mock.On call
//   - baseURL
//   - webhookSecret
//   - pay
//   - certificate
func (_e *MockClient_Expecter) SubscribeToChats(baseURL interface{}, webhookSecret interface{}, pay interface{}, certificate interface{}) *MockClient_SubscribeToChats_Call {
	return &MockClient_SubscribeToChats_Call{Call: _e.mock.On("SubscribeToChats", baseURL, webhookSecret, pay, certificate)}
}

func (_c *MockClient_SubscribeToChats_Call) Run(run func(baseURL string, webhookSecret string, pay bool, certificate string)) *MockClient_SubscribeToChats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool), args[3].(string))
	})
	return _c
}

func (_c *MockClient_SubscribeToChats_Call) Return(subscription *clientmodels.Subscription, err error) *MockClient_SubscribeToChats_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockClient_SubscribeToChats_Call) RunAndReturn(run func(baseURL string, webhookSecret string, pay bool, certificate string) (*clientmodels.Subscription, error)) *MockClient_SubscribeToChats_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToUserChats provides a mock function for the type MockClient
func (_mock *MockClient) SubscribeToUserChats(user string, baseURL string, webhookSecret string, pay bool, certificate string) (*clientmodels.Subscription, error) {
	ret := _mock.Called(user, baseURL, webhookSecret, pay, certificate)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToUserChats")
	}

	var r0 *clientmodels.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, bool, string) (*clientmodels.Subscription, error)); ok {
		return returnFunc(user, baseURL, webhookSecret, pay, certificate)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, bool, string) *clientmodels.Subscription); ok {
		r0 = returnFunc(user, baseURL, webhookSecret, pay, certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, bool, string) error); ok {
		r1 = returnFunc(user, baseURL, webhookSecret, pay, certificate)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SubscribeToUserChats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToUserChats'
type MockClient_SubscribeToUserChats_Call struct {
	*mock.Call
}

// SubscribeToUserChats is a helper method to define mock.On call
//   - user
//   - baseURL
//   - webhookSecret
//   - pay
//   - certificate
func (_e *MockClient_Expecter) SubscribeToUserChats(user interface{}, baseURL interface{}, webhookSecret interface{}, pay interface{}, certificate interface{}) *MockClient_SubscribeToUserChats_Call {
	return &MockClient_SubscribeToUserChats_Call{Call: _e.mock.On("SubscribeToUserChats", user, baseURL, webhookSecret, pay, certificate)}
}

func (_c *MockClient_SubscribeToUserChats_Call) Run(run func(user string, baseURL string, webhookSecret string, pay bool, certificate string)) *MockClient_SubscribeToUserChats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(bool), args[4].(string))
	})
	return _c
}

func (_c *MockClient_SubscribeToUserChats_Call) Return(subscription *clientmodels.Subscription, err error) *MockClient_SubscribeToUserChats_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockClient_SubscribeToUserChats_Call) RunAndReturn(run func(user string, baseURL string, webhookSecret string, pay bool, certificate string) (*clientmodels.Subscription, error)) *MockClient_SubscribeToUserChats_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetChatReaction provides a mock function for the type MockClient
func (_mock *MockClient) UnsetChatReaction(chatID string, messageID string, userID string, emoji string) (*clientmodels.Message, error) {
	ret := _mock.Called(chatID, messageID, userID, emoji)

	if len(ret) == 0 {
		panic("no return value specified for UnsetChatReaction")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) (*clientmodels.Message, error)); ok {
		return returnFunc(chatID, messageID, userID, emoji)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) *clientmodels.Message); ok {
		r0 = returnFunc(chatID, messageID, userID, emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = returnFunc(chatID, messageID, userID, emoji)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UnsetChatReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetChatReaction'
type MockClient_UnsetChatReaction_Call struct {
	*mock.Call
}

// UnsetChatReaction is a helper method to define mock.On call
//   - chatID
//   - messageID
//   - userID
//   - emoji
func (_e *MockClient_Expecter) UnsetChatReaction(chatID interface{}, messageID interface{}, userID interface{}, emoji interface{}) *MockClient_UnsetChatReaction_Call {
	return &MockClient_UnsetChatReaction_Call{Call: _e.mock.On("UnsetChatReaction", chatID, messageID, userID, emoji)}
}

func (_c *MockClient_UnsetChatReaction_Call) Run(run func(chatID string, messageID string, userID string, emoji string)) *MockClient_UnsetChatReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_UnsetChatReaction_Call) Return(message *clientmodels.Message, err error) *MockClient_UnsetChatReaction_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockClient_UnsetChatReaction_Call) RunAndReturn(run func(chatID string, messageID string, userID string, emoji string) (*clientmodels.Message, error)) *MockClient_UnsetChatReaction_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetReaction provides a mock function for the type MockClient
func (_mock *MockClient) UnsetReaction(teamID string, channelID string, parentID string, messageID string, userID string, emoji string) (*clientmodels.Message, error) {
	ret := _mock.Called(teamID, channelID, parentID, messageID, userID, emoji)

	if len(ret) == 0 {
		panic("no return value specified for UnsetReaction")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string, string) (*clientmodels.Message, error)); ok {
		return returnFunc(teamID, channelID, parentID, messageID, userID, emoji)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string, string) *clientmodels.Message); ok {
		r0 = returnFunc(teamID, channelID, parentID, messageID, userID, emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = returnFunc(teamID, channelID, parentID, messageID, userID, emoji)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UnsetReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetReaction'
type MockClient_UnsetReaction_Call struct {
	*mock.Call
}

// UnsetReaction is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - parentID
//   - messageID
//   - userID
//   - emoji
func (_e *MockClient_Expecter) UnsetReaction(teamID interface{}, channelID interface{}, parentID interface{}, messageID interface{}, userID interface{}, emoji interface{}) *MockClient_UnsetReaction_Call {
	return &MockClient_UnsetReaction_Call{Call: _e.mock.On("UnsetReaction", teamID, channelID, parentID, messageID, userID, emoji)}
}

func (_c *MockClient_UnsetReaction_Call) Run(run func(teamID string, channelID string, parentID string, messageID string, userID string, emoji string)) *MockClient_UnsetReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockClient_UnsetReaction_Call) Return(message *clientmodels.Message, err error) *MockClient_UnsetReaction_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockClient_UnsetReaction_Call) RunAndReturn(run func(teamID string, channelID string, parentID string, messageID string, userID string, emoji string) (*clientmodels.Message, error)) *MockClient_UnsetReaction_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChatMessage provides a mock function for the type MockClient
func (_mock *MockClient) UpdateChatMessage(chatID string, msgID string, message string, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error) {
	ret := _mock.Called(chatID, msgID, message, mentions)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChatMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, []models.ChatMessageMentionable) (*clientmodels.Message, error)); ok {
		return returnFunc(chatID, msgID, message, mentions)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, []models.ChatMessageMentionable) *clientmodels.Message); ok {
		r0 = returnFunc(chatID, msgID, message, mentions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, []models.ChatMessageMentionable) error); ok {
		r1 = returnFunc(chatID, msgID, message, mentions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateChatMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChatMessage'
type MockClient_UpdateChatMessage_Call struct {
	*mock.Call
}

// UpdateChatMessage is a helper method to define mock.On call
//   - chatID
//   - msgID
//   - message
//   - mentions
func (_e *MockClient_Expecter) UpdateChatMessage(chatID interface{}, msgID interface{}, message interface{}, mentions interface{}) *MockClient_UpdateChatMessage_Call {
	return &MockClient_UpdateChatMessage_Call{Call: _e.mock.On("UpdateChatMessage", chatID, msgID, message, mentions)}
}

func (_c *MockClient_UpdateChatMessage_Call) Run(run func(chatID string, msgID string, message string, mentions []models.ChatMessageMentionable)) *MockClient_UpdateChatMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].([]models.ChatMessageMentionable))
	})
	return _c
}

func (_c *MockClient_UpdateChatMessage_Call) Return(message1 *clientmodels.Message, err error) *MockClient_UpdateChatMessage_Call {
	_c.Call.Return(message1, err)
	return _c
}

func (_c *MockClient_UpdateChatMessage_Call) RunAndReturn(run func(chatID string, msgID string, message string, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error)) *MockClient_UpdateChatMessage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMessage provides a mock function for the type MockClient
func (_mock *MockClient) UpdateMessage(teamID string, channelID string, parentID string, msgID string, message string, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error) {
	ret := _mock.Called(teamID, channelID, parentID, msgID, message, mentions)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessage")
	}

	var r0 *clientmodels.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string, []models.ChatMessageMentionable) (*clientmodels.Message, error)); ok {
		return returnFunc(teamID, channelID, parentID, msgID, message, mentions)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string, []models.ChatMessageMentionable) *clientmodels.Message); ok {
		r0 = returnFunc(teamID, channelID, parentID, msgID, message, mentions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, string, []models.ChatMessageMentionable) error); ok {
		r1 = returnFunc(teamID, channelID, parentID, msgID, message, mentions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UpdateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMessage'
type MockClient_UpdateMessage_Call struct {
	*mock.Call
}

// UpdateMessage is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - parentID
//   - msgID
//   - message
//   - mentions
func (_e *MockClient_Expecter) UpdateMessage(teamID interface{}, channelID interface{}, parentID interface{}, msgID interface{}, message interface{}, mentions interface{}) *MockClient_UpdateMessage_Call {
	return &MockClient_UpdateMessage_Call{Call: _e.mock.On("UpdateMessage", teamID, channelID, parentID, msgID, message, mentions)}
}

func (_c *MockClient_UpdateMessage_Call) Run(run func(teamID string, channelID string, parentID string, msgID string, message string, mentions []models.ChatMessageMentionable)) *MockClient_UpdateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]models.ChatMessageMentionable))
	})
	return _c
}

func (_c *MockClient_UpdateMessage_Call) Return(message1 *clientmodels.Message, err error) *MockClient_UpdateMessage_Call {
	_c.Call.Return(message1, err)
	return _c
}

func (_c *MockClient_UpdateMessage_Call) RunAndReturn(run func(teamID string, channelID string, parentID string, msgID string, message string, mentions []models.ChatMessageMentionable) (*clientmodels.Message, error)) *MockClient_UpdateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function for the type MockClient
func (_mock *MockClient) UploadFile(teamID string, channelID string, filename string, filesize int, mimeType string, data io.Reader, chat *clientmodels.Chat) (*clientmodels.Attachment, error) {
	ret := _mock.Called(teamID, channelID, filename, filesize, mimeType, data, chat)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 *clientmodels.Attachment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, int, string, io.Reader, *clientmodels.Chat) (*clientmodels.Attachment, error)); ok {
		return returnFunc(teamID, channelID, filename, filesize, mimeType, data, chat)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, int, string, io.Reader, *clientmodels.Chat) *clientmodels.Attachment); ok {
		r0 = returnFunc(teamID, channelID, filename, filesize, mimeType, data, chat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientmodels.Attachment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, int, string, io.Reader, *clientmodels.Chat) error); ok {
		r1 = returnFunc(teamID, channelID, filename, filesize, mimeType, data, chat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockClient_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - teamID
//   - channelID
//   - filename
//   - filesize
//   - mimeType
//   - data
//   - chat
func (_e *MockClient_Expecter) UploadFile(teamID interface{}, channelID interface{}, filename interface{}, filesize interface{}, mimeType interface{}, data interface{}, chat interface{}) *MockClient_UploadFile_Call {
	return &MockClient_UploadFile_Call{Call: _e.mock.On("UploadFile", teamID, channelID, filename, filesize, mimeType, data, chat)}
}

func (_c *MockClient_UploadFile_Call) Run(run func(teamID string, channelID string, filename string, filesize int, mimeType string, data io.Reader, chat *clientmodels.Chat)) *MockClient_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(int), args[4].(string), args[5].(io.Reader), args[6].(*clientmodels.Chat))
	})
	return _c
}

func (_c *MockClient_UploadFile_Call) Return(attachment *clientmodels.Attachment, err error) *MockClient_UploadFile_Call {
	_c.Call.Return(attachment, err)
	return _c
}

func (_c *MockClient_UploadFile_Call) RunAndReturn(run func(teamID string, channelID string, filename string, filesize int, mimeType string, data io.Reader, chat *clientmodels.Chat) (*clientmodels.Attachment, error)) *MockClient_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}
